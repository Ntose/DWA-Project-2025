@using System.Web
@model WebApp.ViewModels.LoginVm
@{
    ViewData["Title"] = "Login";
    Layout = "_Layout";
}
<div class="row justify-content-center mt-5">
    <div class="col-md-6 col-lg-5">
        <div class="card shadow-sm border-0 bg-light">
            <div class="card-body p-4">
                <h2 class="mb-4 text-center text-primary">
                    <i class="bi bi-box-arrow-in-right me-2"></i>Login
                </h2>

                <form asp-action="Login" method="post">
                    <div class="mb-3">
                        <label asp-for="Username" class="form-label fw-semibold text-dark">Username</label>
                        <input asp-for="Username" class="form-control" placeholder="Enter your username" />
                        <span asp-validation-for="Username" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="Password" class="form-label fw-semibold text-dark">Password</label>
                        <input asp-for="Password" type="password" class="form-control" placeholder="Enter your password" />
                        <span asp-validation-for="Password" class="text-danger small"></span>
                    </div>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" id="rememberMe" name="RememberMe" />
                        <label class="form-check-label" for="rememberMe">Remember me</label>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="bi bi-box-arrow-in-right me-1"></i>Login
                    </button>
                </form>
                <p class="text-muted text-center mt-3 mb-0">
                    Don't have an account? <a asp-action="Register">Register here</a>
                </p>
            </div>
        </div>
    </div>
</div>

<!-- Error Modal -->
<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="errorModalLabel">
                    <i class="bi bi-exclamation-triangle me-2"></i>Login Error
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="errorContent">
                    <!-- Error messages will be populated here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>Close
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function () {
            // Check for server-side validation errors and show modal
        @if (!ViewData.ModelState.IsValid && ViewData.ModelState.Values.Any(v => v.Errors.Count > 0))
        {
            <text>
                    var errorMessages = [];
                @foreach (var modelState in ViewData.ModelState)
                {
                    foreach (var error in modelState.Value.Errors)
                    {
                        <text>errorMessages.push('@Html.Raw(HttpUtility.JavaScriptStringEncode(error.ErrorMessage))');</text>
                    }
                }
                    showErrorModal(errorMessages);
            </text>
        }

            // Check for TempData error message (for login failures)
        @if (TempData["ErrorMessage"] != null)
        {
            <text>
                    showErrorModal(['@Html.Raw(HttpUtility.JavaScriptStringEncode(TempData["ErrorMessage"].ToString()))']);
            </text>
        }

            // Handle form submission with AJAX for better error handling
            $('form').on('submit', function (e) {
                e.preventDefault();

                var form = $(this);
                var formData = form.serialize();

                // Show loading state
                var submitBtn = form.find('button[type="submit"]');
                var originalText = submitBtn.html();
                submitBtn.html('<i class="bi bi-hourglass-split me-1"></i>Logging in...').prop('disabled', true);

                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                        // If successful, redirect will happen automatically
                        // This success handler might not be reached due to redirect
                        window.location.href = response.redirectUrl || '/';
                    },
                    error: function (xhr) {
                        // Restore button state
                        submitBtn.html(originalText).prop('disabled', false);

                        var errorMessages = [];

                        if (xhr.status === 400) {
                            // Validation errors
                            var response = xhr.responseJSON;
                            if (response && response.errors) {
                                Object.keys(response.errors).forEach(function (key) {
                                    response.errors[key].forEach(function (error) {
                                        errorMessages.push(error);
                                    });
                                });
                            }
                        } else if (xhr.status === 401) {
                            // Unauthorized - invalid credentials
                            errorMessages.push('Invalid username or password. Please try again.');
                        } else if (xhr.status === 500) {
                            // Server error
                            errorMessages.push('An internal server error occurred. Please try again later.');
                        } else {
                            // Other errors
                            errorMessages.push('An unexpected error occurred. Please try again.');
                        }

                        if (errorMessages.length > 0) {
                            showErrorModal(errorMessages);
                        }
                    }
                });
            });
        });

        function showErrorModal(messages) {
            var errorContent = $('#errorContent');
            errorContent.empty();

            if (messages.length === 1) {
                errorContent.html('<p class="mb-0 text-danger"><i class="bi bi-exclamation-circle me-2"></i>' + messages[0] + '</p>');
            } else {
                var list = '<ul class="mb-0 text-danger">';
                messages.forEach(function (message) {
                    list += '<li><i class="bi bi-exclamation-circle me-2"></i>' + message + '</li>';
                });
                list += '</ul>';
                errorContent.html(list);
            }

            $('#errorModal').modal('show');
        }
    </script>
}